{
  "scenarios": [
    {
      "name": "simple-failure",
      "description": "Single test failure with assertion error",
      "tests": [
        {
          "suite": "Math Operations",
          "test": "addition > should add positive numbers",
          "status": "passed"
        },
        {
          "suite": "Math Operations", 
          "test": "addition > should handle negative numbers",
          "status": "failed",
          "error": {
            "type": "Assertion Error",
            "message": "Expected 0 but received -2",
            "expected": "0",
            "received": "-2",
            "file": "/src/math.test.ts",
            "line": 8
          }
        }
      ]
    },
    {
      "name": "multiple-failures",
      "description": "Multiple test failures in same suite",
      "tests": [
        {
          "suite": "String Utils",
          "test": "capitalize > should capitalize first letter",
          "status": "failed",
          "error": {
            "type": "Assertion Error",
            "message": "Expected 'Hello' but received 'hello'",
            "expected": "Hello",
            "received": "hello",
            "file": "/src/string-utils.test.ts",
            "line": 5
          }
        },
        {
          "suite": "String Utils",
          "test": "capitalize > should handle empty string",
          "status": "failed",
          "error": {
            "type": "Type Error",
            "message": "Cannot read property 'toUpperCase' of undefined",
            "file": "/src/string-utils.test.ts",
            "line": 10
          }
        },
        {
          "suite": "String Utils",
          "test": "trim > should remove whitespace",
          "status": "passed"
        }
      ]
    },
    {
      "name": "cross-suite-failures",
      "description": "Failures across different test files",
      "tests": [
        {
          "suite": "API Client",
          "file": "/src/api/client.test.ts",
          "test": "GET requests > should fetch user data",
          "status": "failed",
          "error": {
            "type": "Timeout",
            "message": "Test exceeded timeout of 5000ms",
            "timeout": 5000,
            "file": "/src/api/client.test.ts",
            "line": 15
          }
        },
        {
          "suite": "Database",
          "file": "/src/db/connection.test.ts",
          "test": "connection > should connect to database",
          "status": "failed",
          "error": {
            "type": "Test Setup Error",
            "message": "Failed to initialize database connection in beforeAll hook",
            "file": "/src/db/connection.test.ts",
            "line": 3
          }
        }
      ]
    },
    {
      "name": "error-types",
      "description": "Each error type classification",
      "tests": [
        {
          "suite": "Error Types",
          "test": "assertions > should match expected value",
          "status": "failed",
          "error": {
            "type": "Assertion Error",
            "message": "Expected 42 but received 41",
            "expected": "42",
            "received": "41",
            "file": "/src/errors.test.ts",
            "line": 10
          }
        },
        {
          "suite": "Error Types",
          "test": "types > should handle type mismatch",
          "status": "failed",
          "error": {
            "type": "Type Error",
            "message": "Cannot read property 'length' of null",
            "file": "/src/errors.test.ts",
            "line": 20
          }
        },
        {
          "suite": "Error Types",
          "test": "references > should access defined variable",
          "status": "failed",
          "error": {
            "type": "Reference Error",
            "message": "undefinedVariable is not defined",
            "file": "/src/errors.test.ts",
            "line": 30
          }
        },
        {
          "suite": "Error Types",
          "test": "async > should complete within timeout",
          "status": "failed",
          "error": {
            "type": "Timeout",
            "message": "Test exceeded timeout of 1000ms",
            "timeout": 1000,
            "file": "/src/errors.test.ts",
            "line": 40
          }
        },
        {
          "suite": "Error Types",
          "test": "lifecycle > setup",
          "status": "failed",
          "error": {
            "type": "Test Setup Error",
            "message": "Failed in beforeEach hook: Cannot connect to test database",
            "file": "/src/errors.test.ts",
            "line": 5
          }
        },
        {
          "suite": "Error Types",
          "test": "lifecycle > teardown",
          "status": "failed",
          "error": {
            "type": "Test Teardown Error",
            "message": "Failed in afterEach hook: Cannot cleanup test files",
            "file": "/src/errors.test.ts",
            "line": 50
          }
        }
      ]
    },
    {
      "name": "long-output",
      "description": "Values exceeding truncation limits",
      "tests": [
        {
          "suite": "Long Output",
          "test": "arrays > should match large array",
          "status": "failed",
          "error": {
            "type": "Assertion Error",
            "message": "Arrays do not match",
            "expected": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]",
            "received": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 99]",
            "file": "/src/long.test.ts",
            "line": 5
          }
        }
      ]
    },
    {
      "name": "special-characters",
      "description": "Unicode, newlines, quotes in test names",
      "tests": [
        {
          "suite": "Special Characters",
          "test": "unicode > should handle emoji ðŸš€",
          "status": "failed",
          "error": {
            "type": "Assertion Error",
            "message": "Expected 'ðŸš€ Launch' but received 'ðŸ›¸ UFO'",
            "expected": "ðŸš€ Launch",
            "received": "ðŸ›¸ UFO",
            "file": "/src/special.test.ts",
            "line": 5
          }
        },
        {
          "suite": "Special Characters",
          "test": "quotes > should handle \"double quotes\" and 'single quotes'",
          "status": "failed",
          "error": {
            "type": "Assertion Error",
            "message": "String with \"quotes\" doesn't match",
            "expected": "Hello \"World\"",
            "received": "Hello 'World'",
            "file": "/src/special.test.ts",
            "line": 10
          }
        }
      ]
    },
    {
      "name": "nested-describes",
      "description": "Deep test hierarchy",
      "tests": [
        {
          "suite": "App",
          "test": "Components > Button > Primary > Large > should render with correct classes",
          "status": "failed",
          "error": {
            "type": "Assertion Error",
            "message": "Expected element to have class 'btn-large' but found 'btn-medium'",
            "expected": "btn-large",
            "received": "btn-medium",
            "file": "/src/components/button.test.tsx",
            "line": 45
          }
        },
        {
          "suite": "App",
          "test": "Components > Button > Primary > Small > should have correct padding",
          "status": "passed"
        }
      ]
    },
    {
      "name": "performance",
      "description": "Large test suite for performance testing",
      "totalTests": 10000,
      "failedTests": 250,
      "duration": 45.67
    }
  ]
}